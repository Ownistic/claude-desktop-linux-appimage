name: Build and Release AppImage

on:
  push:
    tags:
      - 'v*'
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            patchy-cnb/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('patchy-cnb/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js dependencies
        working-directory: ./patchy-cnb
        run: |
          # Install dependencies with npm without creating package-lock.json
          npm install --no-package-lock

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            p7zip-full \
            unzip \
            libfuse2 \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            librsvg2-dev \
            imagemagick \
            icoutils \
            appstream \
            wget \
            curl \
            build-essential \
            perl
          
          # Install asar globally via npm
          sudo npm install -g asar

      - name: Download AppImageTool
        run: |
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /tmp/appimagetool
          chmod +x /tmp/appimagetool
          sudo mv /tmp/appimagetool /usr/local/bin/appimagetool

      - name: Extract version information
        id: version
        run: |
          # Extract versions from build-functions.sh
          CLAUDE_VERSION=$(grep '^CLAUDE_VERSION=' scripts/build-functions.sh | cut -d'"' -f2)
          APPIMAGE_VERSION=$(grep '^APPIMAGE_VERSION=' scripts/build-functions.sh | cut -d'"' -f2)
          ELECTRON_VERSION=$(grep '^ELECTRON_VERSION=' scripts/build-functions.sh | cut -d'"' -f2)
          
          echo "claude_version=$CLAUDE_VERSION" >> $GITHUB_OUTPUT
          echo "appimage_version=$APPIMAGE_VERSION" >> $GITHUB_OUTPUT
          echo "electron_version=$ELECTRON_VERSION" >> $GITHUB_OUTPUT
          
          echo "Claude Desktop version: $CLAUDE_VERSION"
          echo "AppImage version: $APPIMAGE_VERSION"
          echo "Electron version: $ELECTRON_VERSION"

      - name: Build AppImage
        run: |
          echo "Building AppImage..."
          echo "Claude Desktop: ${{ steps.version.outputs.claude_version }}"
          echo "AppImage: ${{ steps.version.outputs.appimage_version }}"
          echo "Electron: ${{ steps.version.outputs.electron_version }}"
          ./build-appimage.sh

      - name: Verify AppImage
        run: |
          # Check if AppImage was created
          APPIMAGE_FILE=$(ls appimage-output/Claude-*.AppImage | head -n 1)
          if [ -f "$APPIMAGE_FILE" ]; then
            echo "✅ AppImage created successfully: $APPIMAGE_FILE"
            ls -lh "$APPIMAGE_FILE"
          
            # Test AppImage can be executed (basic validation)
            if "$APPIMAGE_FILE" --appimage-help >/dev/null 2>&1; then
              echo "✅ AppImage passes basic validation"
            else
              echo "⚠️  AppImage may have issues (but this is not necessarily fatal)"
            fi
          else
            echo "❌ No AppImage found in output directory"
            ls -la appimage-output/
            exit 1
          fi

      - name: Upload AppImage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: claude-desktop-appimage-v${{ steps.version.outputs.appimage_version }}
          path: appimage-output/Claude-*.AppImage
          retention-days: 30

      - name: Create Release Notes
        id: release_notes
        run: |
          CLAUDE_VERSION="${{ steps.version.outputs.claude_version }}"
          APPIMAGE_VERSION="${{ steps.version.outputs.appimage_version }}"
          ELECTRON_VERSION="${{ steps.version.outputs.electron_version }}"
          
          # Create release notes
          cat > release_notes.md << EOF
          # Claude Desktop AppImage v${APPIMAGE_VERSION}
          
          This is a portable AppImage build of Claude Desktop that runs on most Linux distributions without installation.
          
          ## 📦 What's Included
          - **Claude Desktop**: v${CLAUDE_VERSION}
          - **Electron Runtime**: v${ELECTRON_VERSION} (bundled)
          - **Architecture**: x86_64
          
          ## 🚀 Quick Start
          
          1. **Download** the AppImage file
          2. **Make it executable**: \`chmod +x Claude-${APPIMAGE_VERSION}-claude-${CLAUDE_VERSION}-x86_64.AppImage\`
          3. **Run it**: \`./Claude-${APPIMAGE_VERSION}-claude-${CLAUDE_VERSION}-x86_64.AppImage\`
          
          ## ✨ Features
          - 🔧 **Self-contained**: No installation required, includes all dependencies
          - 🐧 **Universal**: Works on most Linux distributions (Ubuntu, Fedora, Arch, etc.)
          - 🎨 **Native UI**: Full title bar and window controls on Linux
          - 🔗 **Protocol handler**: Supports claude:// URL scheme
          - 📋 **System integration**: Desktop entry and file associations
          
          ## 🔧 System Requirements
          - Linux x86_64
          - GLIBC 2.17+ (available on most modern distributions)
          - Graphics drivers supporting OpenGL
          
          ## 🐛 Troubleshooting
          
          If you encounter the error \`/tmp/.mount_*/AppRun: exec: electron: not found\`, this AppImage fixes that issue by bundling Electron directly.
          
          For other issues:
          - Ensure the AppImage has execute permissions
          - Try running from terminal to see error messages
          - Check that your system supports AppImages (most modern Linux distributions do)
          
          ## 📝 Version History
          - AppImage version tracks our packaging improvements
          - Claude Desktop version tracks the official Anthropic releases
          
          ---
          
          **Note**: This is an unofficial community build. Claude Desktop is developed by Anthropic.
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Upload AppImage to Release
        if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: appimage-output/Claude-*.AppImage
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          draft: false
          prerelease: false
          name: "Claude Desktop AppImage v${{ steps.version.outputs.appimage_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}